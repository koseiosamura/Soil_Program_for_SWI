import numpy as np
#from numba import types
#from numba.typed import List
import sys

#from first import first_function
#from second import second_function
#from third import third_function
#from npy_save import npy_save_function



#
#
#
#
#
#
#




def numerical_SWI_function():
    

    vals = sys.argv[:]

    input_anal_RAP = vals[1]
    input_SWI = vals[2]
    input_First = vals[3]
    input_Second = vals[4]
    input_Third = vals[5]
    input_para = vals[10]
    parameter = np.load(input_para)
    

    read_RAP = np.load(input_anal_RAP)
    read_SWI = np.load(input_SWI)
    read_First = np.load(input_First)
    read_Second = np.load(input_Second)
    read_Third = np.load(input_Third)
    
    SWI_index = len(read_SWI)


    num = 1
    First_list = []
    Second_list = []
    Third_list = []
    First_arr = []
    Second_arr = []
    Third_arr = []
    while num <= 6:
        #print(num)
        
        First_list, First_Z_list = first_function(SWI_index,read_SWI,read_First,read_RAP,parameter,First_list,First_arr,num)
        First_arr = np.array(First_list[:])
        
        First_Z = np.array(First_Z_list[:])
        Second_list, Second_Z_list = second_function(SWI_index,read_SWI,read_Second,parameter,First_Z,Second_list,Second_arr,num)
        Second_arr = np.array(Second_list[:])
        
        Second_Z = np.array(Second_Z_list[:])
        Third_list = third_function(SWI_index,read_SWI,read_Third,parameter,Second_Z,Third_list,Third_arr,num)
        Third_arr = np.array(Third_list[:])
        
        num +=1


    #SWI = np.array(First_list) + np.array(Second_list) + np.array(Third_list)
    SWI = First_arr + Second_arr + Third_arr
    #anal_index_start = 5 * SWI_index
    #anal_index_end = len(First_list) + 1
    
    #SWI =  SWI_sum[anal_index_start:anal_index_end]
    First = First_list
    Second = Second_list
    Third = Third_list
    
    npy_save_function(read_SWI,SWI,First,Second,Third,First_list,Second_list,Third_list,vals)




numerical_SWI_function()
